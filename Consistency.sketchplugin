// Creates a shared object for the selected layers (cmd control option m)


@import 'inventory.js'

var doc = context.document;

var layer = selection.firstObject();
var pass = true;
var selectedLayers = selection;


function areOfEqualClass (layers) {
    var baseClass = layers[0].className();
    for (var i = 0; i < layers.count(); i++) {
        if (layers[i].className() != baseClass) {
            return false;
        }
    }
    return true;
}

if (selectedLayers.count() > 1) {
    pass = areOfEqualClass(selectedLayers);
}

if (pass) {
    if(layer) {
        if (!layer.isSymbol()) {
            if (true) {
                if (layer.className() == "MSShapeGroup") {

                    var layerStyle;
                    var sharedStyles = doc.documentData().layerStyles();
                    var hasSharedStyle = layer.style().sharedObjectID() != null;

                    var count = 0;
                    count = countAllShapeLayersBasedOnLayerWithStyle(layer);

                    // make sure that when the layer already has a set shared style, to not apply any changes to all other layers
                    if (hasSharedStyle) {
                        count = 0;
                    }

                    // select
                    var selection = selectLayerStyle(0, count);

                    if (selection){
                        if(selection[0] == 1000) {
                            if (selection[1] == -1) {

                               // create new text style
                               layerStyle = sharedStyles.addSharedStyleWithName_firstInstance(selection[2], layer.style());
                               doc.showMessage("Style created")
                            } else {

                                // apply existing style
                                var index = selection[1];
                                layerStyle = sharedStyles.objects().objectAtIndex(index);
                            }

                            // style all other layers
                            if (!hasSharedStyle) {
                                var result = styleAllLayersBasedOnLayerWithLayerStyle(layer, layerStyle);
                                log(result)
                                doc.showMessage("Style applied to " + result.count() + " instances");
                            } else {
                                // apply self
                                styleLayer(layer, layerStyle);
                                doc.showMessage("Style applied to selected layer");
                            }
                        } else if (selection[0] == 1002) {
                            unlink(layer);
                        }
                    } else {
                        var name = getUserInput("New Layer Style");
                        if (name){
                            // create new layer style
                            sharedStyles = doc.documentData().layerStyles();
                            layerStyle = sharedStyles.addSharedStyleWithName_firstInstance(name, layer.style());

                            styleAllLayersBasedOnLayerWithLayerStyle(layer, layerStyle);

                            doc.showMessage("Style created")
                        }
                    }
                } else if (layer.className() == "MSTextLayer") {

                    var textStyle;
                    var textStyles = doc.documentData().layerTextStyles();
                    var referenceStyle = layer.style().textStyle();

                    var hasSharedStyle = layer.style().sharedObjectID() != null;

                    var selectIndex = 0;

                    if (textStyles) {
                        // get index
                        for (var i = 0; i < textStyles.objects().count(); i++) {
                            if (layer.style().sharedObjectID() == textStyles.objects().objectAtIndex(i).objectID()) {
                                selectIndex = i;
                            }
                        }
                    }

                    var count = 0;
                    count = countAllTextLayersBasedOnLayerWithTextStyle(layer, textStyle);

                    // make sure that when the layer already has a set shared style, to not apply any changes to all other layers
                    if (hasSharedStyle) {
                        count = 0;
                    }

                    var selection = selectTextStyle(selectIndex, count);

                    // todo if it has style and create a new one, dont apply
                    if (selection){
                        var selectedStyleIndex = selection[1];
                        var checkBoxValue = selection[3];

                        // pressed okay
                        if (selection[0] == 1000) {
                            // new style name?
                            if (selectedStyleIndex == -1) {
                               // create new text style
                               textStyle = textStyles.addSharedStyleWithName_firstInstance(selection[2], layer.style());
                               doc.showMessage("Duplicated text style");
                            } else {
                                // apply existing style
                                var index = selection[1];
                                textStyle = textStyles.objects().objectAtIndex(index);
                            }

                            // style all other text layers
                            if (checkBoxValue == 1) {
                                var result = styleAllTextLayersBasedOnLayerWithTextStyle(layer, textStyle);
                                doc.showMessage("Style applied to " + result.count() + " instances");
                            }

                            // apply self
                            styleLayer(layer, textStyle);
                            doc.showMessage("Style applied to selected layer");
                        } else if (selection[0] == 1002) {
                            unlink(layer);
                        }
                    } else {
                        var name = getUserInput("New Text Style for text layers", count);
                        if (name){

                            // create new text style
                           textStyles = doc.documentData().layerTextStyles()
                           var textStyle = textStyles.addSharedStyleWithName_firstInstance(name, layer.style());

                           styleAllTextLayersBasedOnLayerWithTextStyle(layer, textStyle);

                           doc.showMessage("Style created")
                        }
                    }
                } else if (layer.className() == "MSLayerGroup") {
                    var name = getUserInput("New Symbol");
                    if (name){

                        // get equal layers
                        var layers = getEqualLayers(layer, doc.currentPage().children());

                        // add symbol
                        symbols = doc.documentData().layerSymbols()
                        var symbol = symbols.addSymbolWithName_firstInstance(name, layer);

                        // dump(symbols)
                        for (var i = 0; i < layers.count(); i++) {
                            symbol.registerInstance(layers.objectAtIndex(i));
                            layers.objectAtIndex(i).setName(symbol.name());

                            doc.showMessage("Converted " + layers.count() + " layers to symbols.")
                        }

                        // getPageByName("Symbols").addLayers([layer]);
                        //
                        var currentPage = doc.currentPage();

                        // generate symbol sheet
                        // addSymbolsSheetToPage("✴️ Symbols");

                        // reset page
                        doc.setCurrentPage(currentPage);

                    }
                }
            } else {
                doc.showMessage("Can’t add another style to this layer.")
            }
        } else {
            // get the symbols name
            var symbolName = doc.documentData().layerSymbols().symbolWithID(layer.sharedObjectID()).name()

            // ask for a new name
            var name = [doc askForUserInput:"Duplicate Symbol as…" initialValue:symbolName]);

            if (name && name != symbolName){

                // unlink symbol from group
                layer.unregisterAsSymbolIfNecessary();

                // add the symbol
                symbols = doc.documentData().layerSymbols();
                symbols.addSymbolWithName_firstInstance(name, layer);

                doc.showMessage("Duplicated Symbol");
            }
        }
    }
} else {
    doc.showMessage("Please make sure that you select layers of the same type.");
}

doc.reloadInspector();


function getUserInput(placeholder) {
    var name = [doc askForUserInput:"Consistency" initialValue:placeholder]);
    return name;
}

function createSelect (msg, items, selectedItemIndex, c){
    var selectedItemIndex = selectedItemIndex || 0
    var count = c || 0
    var buttonStates = [1];

    var showCheckbox = true;
    if (c <= 1) {
        showCheckbox = false;
        buttonStates = [0];
    }

    // combobox
    var combobox = [[NSComboBox alloc] initWithFrame:NSMakeRect(0,0,250,25)]
    [combobox addItemsWithObjectValues:items]
    [combobox selectItemAtIndex:selectedItemIndex]
    combobox.setEditable(true);
    combobox.setCompletes(true)

    // checkbox
    var checkbox = NSButton.alloc().initWithFrame(NSMakeRect(0.0, 40.0, 250.0, 20.0))
    checkbox.setButtonType(NSSwitchButton)
    checkbox.setTitle("Apply style to " + (count - 1) + " other matching layers")
    checkbox.setState(buttonStates[0])
    checkbox.setCOSJSTargetFunction(function(sender){
      buttonStates[0] = buttonStates[10] == 0 ? 1 : 0
    })

    var alert = [COSAlertWindow new];

    [alert setMessageText: 'Consistency']
    [alert setInformativeText: msg]
    [alert addButtonWithTitle: 'OK'];
    [alert addButtonWithTitle: 'Cancel'];

    if (c > 1) [alert addButtonWithTitle: 'Unlink'];

    alert.addAccessoryView(combobox)

    // only show the checkbox if necessary
    if (showCheckbox) alert.addAccessoryView(checkbox)

    var responseCode = [alert runModal]
    var sel = [combobox indexOfSelectedItem]
    var value = [combobox stringValue]
    var checkboxValue = checkbox.state();

    return [responseCode, sel, value, checkboxValue]
}

function getLayersByTextStyle (textStyle, scope) {
    var predicate = NSPredicate.predicateWithFormat("(style.textStyle != NULL) && (FUNCTION(style.textStyle, 'isEqualForSync:asPartOfSymbol:', %@, nil) == YES)", textStyle);
    // query page layers
    var queryResult = scope.filteredArrayUsingPredicate(predicate);

    return queryResult;
}

function getLayersByLayerStyle (layerStyle, scope) {
    var predicate = NSPredicate.predicateWithFormat("(style.fill != NULL) && (FUNCTION(style.fill, 'isEqualForSync:asPartOfSymbol:', %@, nil) == YES)", layerStyle.fill());
    // query page layers
    var queryResult = scope.filteredArrayUsingPredicate(predicate);

    return queryResult;
}

function getLayersBySize (referenceLayer, scope) {
    var predicate = NSPredicate.predicateWithFormat("(frame != NULL) && frame.width == %@ && frame.height == %@ && className == %@", referenceLayer.frame().width(), referenceLayer.frame().height());
    var queryResult = scope.filteredArrayUsingPredicate(predicate);

    return queryResult;
}

function getEqualLayers (referenceLayer, scope) {
    var predicate = NSPredicate.predicateWithFormat("(FUNCTION(self, 'isEqualForSync:asPartOfSymbol:', %@, nil) == YES)", context.selection[0]);
    var queryResult = scope.filteredArrayUsingPredicate(predicate);
    return queryResult;
}


function styleAll(layers, style) {
    for (var i = 0; i < layers.count(); i++) {
        styleLayer(layers[i], style);
    }
}

function styleLayer(layer, style) {
    layer.setStyle(style.newInstance());
}

function styleAllTextLayersBasedOnLayerWithTextStyle (layer, textStyle) {

    // get all text layers that match the style
    var layers = getLayersByTextStyle(layer.style().textStyle(), doc.currentPage().children());
    styleAll(layers, textStyle);
    return layers;
}

function countAllTextLayersBasedOnLayerWithTextStyle (layer) {

    // get all text layers that match the style
    var layers = getLayersByTextStyle(layer.style().textStyle(), doc.currentPage().children());
    return layers.count();
}

function countAllShapeLayersBasedOnLayerWithStyle (layer) {

    // get all text layers that match the style
    var layers = getLayersByLayerStyle(layer.style(), doc.currentPage().children());
    return layers.count();
}



function styleAllLayersBasedOnLayerWithLayerStyle (layer, layerStyle) {

    // get all text layers that match the style
    var layers = getLayersByLayerStyle(layer.style(), doc.currentPage().children());
    styleAll(layers, layerStyle);
    return layers;
}


function selectTextStyle (preselect, c) {
    var preselect = preselect || 0;
    var textStyles = [];
    var textItems = [];

    var selection;

    var styles = doc.documentData().layerTextStyles().objects();
    if (styles.count() != 0) {
        for (var i = 0; i < styles.count(); i++) {
          var style = styles.objectAtIndex(i);
            textStyles.push({
                "textStyle": style,
                "name": style.name()
            });
            textItems.push(style.name());
        }
        if (textItems) selection = createSelect("Select or create a text style", textItems, preselect, c);
    } else {
        return;
    }
    return selection;
}

function selectLayerStyle (preselect, c) {
    var preselect = preselect || 0;
    var layerStyles = [];
    var layerStyleItems = [];

    var selection;

    var styles = doc.documentData().layerStyles().objects();
    if (styles.count() != 0) {
        for (var i = 0; i < styles.count(); i++) {
          var style = styles.objectAtIndex(i);
            layerStyles.push({
                "layerStyle": style,
                "name": style.name()
            });
            layerStyleItems.push(style.name());
        }
        if (layerStyleItems) selection = createSelect("Select or create a style", layerStyleItems, preselect, c);
    } else {
        return;
    }
    return selection;
}

function getTextStyleByName(name) {
    var textStyle;
    var textStyles = doc.documentData().layerTextStyles();

    if (textStyles) {
        // get index
        for (var i = 0; i < textStyles.objects().count(); i++) {
            if (textStyles.objects().objectAtIndex(i).name() == name) {
                return textStyles.objects().objectAtIndex(i);
            }
        }
    }
    return null;
}

function unlink (layer) {
    // unlink
    layer.style().setSharedObjectID(null);
    doc.reloadInspector();
    doc.showMessage("Unlinked style");
}